{"version":3,"file":"resizer-box.min.js","sources":["../src/constants/attributes.js","../src/constants/defaultStyles.js","../src/constants/positions.js","../src/resize-observer-manager/resize-observer-manager.mjs","../src/utils/utils.mjs","../src/Resizer.mjs","../src/index.mjs"],"sourcesContent":["export default {\n  WIDTH: \"width\",\n  HEIGHT: \"height\",\n  MAX_WIDTH: \"max-width\",\n  MIN_WIDTH: \"min-width\",\n  MAX_HEIGHT: \"max-height\",\n  MIN_HEIGHT: \"min-height\",\n  RESIZE_RIGHT: \"resize-right\",\n  RESIZE_BOTTOM: \"resize-bottom\",\n  RESIZE_TOP: \"resize-top\",\n  RESIZE_LEFT: \"resize-left\",\n  RESIZE_BOTTOM_RIGHT: \"resize-bottom-right\",\n  RESIZE_BOTTOM_LEFT: \"resize-bottom-left\",\n  RESIZE_TOP_LEFT: \"resize-top-left\",\n  RESIZE_TOP_RIGHT: \"resize-top-right\",\n};\n","export default {\n  width: \"200px\",\n  height: \"200px\",\n};\n","export default {\n  RIGHT: \"right\",\n  LEFT: \"left\",\n  BOTTOM: \"bottom\",\n  TOP: \"top\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  TOP_RIGHT: \"top-right\",\n};\n","/**\n * Manages the ResizeObserver lifecycle\n *\n * Includes lifecycle management of the `ResizeObserver` instance,\n * `subscribe`, `unsubscribe`, '_onResize'\n */\n\nclass ResizeObserverManager {\n  #container = null;\n  #resizeObserver = null;\n  onChange = null;\n\n  constructor(container, onChange) {\n    if (!container) {\n      throw new Error('resize-observer-manager: Missing \"container\" argument');\n    }\n    if (!onChange) {\n      throw new Error('resize-observer-manager: Missing \"onChange\" argument');\n    }\n    this.#container = container;\n    this.onChange = onChange;\n  }\n\n  subscribe() {\n    // For tracking the changes\n    this.#resizeObserver = new ResizeObserver((entries) =>\n      this._onResize.call(this, entries),\n    );\n    this.#resizeObserver.observe(this.#container);\n  }\n\n  unsubscribe() {\n    this.#resizeObserver.disconnect();\n  }\n\n  _onResize(entries) {\n    if (!entries || !entries[0]) return;\n\n    const { width, height } = entries[0].contentRect;\n    const detail = { width, height };\n\n    this.onChange(detail);\n  }\n}\n\nexport default ResizeObserverManager;\n","export function isValueInPixels(value) {\n  const regex = /[0-9]+(?:\\.[0-9]+)?(?=px)/;\n\n  return regex.test(value);\n}\n","import attributes from \"./constants/attributes.js\";\nimport defaultStyles from \"./constants/defaultStyles.js\";\nimport positions from \"./constants/positions.js\";\nimport ResizeObserverManager from \"./resize-observer-manager/resize-observer-manager.mjs\";\nimport { isValueInPixels } from \"./utils/utils.mjs\";\n\n\nexport class Resizer extends HTMLElement {\n  #container = null;\n  #resizeObserver = null;\n\n  static observedAttributes = [\n    attributes.WIDTH,\n    attributes.HEIGHT,\n    attributes.RESIZE_RIGHT,\n    attributes.RESIZE_BOTTOM,\n    attributes.RESIZE_LEFT,\n    attributes.RESIZE_TOP,\n    attributes.RESIZE_TOP_LEFT,\n    attributes.RESIZE_BOTTOM_LEFT,\n    attributes.RESIZE_TOP_RIGHT,\n    attributes.RESIZE_BOTTOM_RIGHT,\n  ];\n\n  handlesAddMethodMap = {\n    [attributes.RESIZE_RIGHT]: this._addRightHandle,\n    [attributes.RESIZE_BOTTOM]: this._addBottomHandle,\n    [attributes.RESIZE_BOTTOM_RIGHT]: this._addBottomRightHandle,\n    [attributes.RESIZE_LEFT]: this._addLeftHandle,\n    [attributes.RESIZE_BOTTOM_LEFT]: this._addBottomLeftHandle,\n    [attributes.RESIZE_TOP_LEFT]: this._addTopLeftHandle,\n    [attributes.RESIZE_TOP_RIGHT]: this._addTopRightHandle,\n    [attributes.RESIZE_TOP]: this._addTopHandle,\n  };\n\n  attributesToPositionMap = {\n    [attributes.RESIZE_RIGHT]: positions.RIGHT,\n    [attributes.RESIZE_BOTTOM]: positions.BOTTOM,\n    [attributes.RESIZE_BOTTOM_RIGHT]: positions.BOTTOM_RIGHT,\n    [attributes.RESIZE_LEFT]: positions.LEFT,\n    [attributes.RESIZE_BOTTOM_LEFT]: positions.BOTTOM_LEFT,\n    [attributes.RESIZE_TOP_LEFT]: positions.TOP_LEFT,\n    [attributes.RESIZE_TOP_RIGHT]: positions.TOP_RIGHT,\n    [attributes.RESIZE_TOP]: positions.TOP,\n  };\n\n  constructor() {\n    super();\n  }\n\n  connectedCallback() {\n    const shadow = this.attachShadow({ mode: \"open\" });\n\n    const template = document.createElement(\"template\");\n    template.innerHTML = `<div class=\"resizer\" data-cy=\"resizer-container\">\n            <style>\n            :host {\n                --box-width: 20px;\n                --box-overflow: calc(var(--box-width) / 2);\n            }            \n            \n            .resizer {\n                position: relative;\n            }\n            \n            .handle {\n                position: absolute;\n            }\n\n            .handle:hover {\n                background-color: #83c0e975;\n            }\n            \n            .handle.right {\n                cursor: col-resize;\n                width: var(--box-width);\n                height: 100%;\n                right: calc(-1 * var(--box-overflow));\n                top: 0;\n            }\n            \n            .handle.left {\n                cursor: col-resize;\n                width: var(--box-width);\n                height: 100%;\n                left: calc(-1 * var(--box-overflow));\n                top: 0;\n            }\n            \n            .handle.bottom {\n                cursor: row-resize;\n                height: var(--box-width);\n                width: 100%;\n                bottom: calc(-1 * var(--box-overflow));\n            }\n            \n            .handle.top {\n                cursor: row-resize;\n                height: var(--box-width);\n                width: 100%;\n                top: calc(-1 * var(--box-overflow));\n            }\n            \n            .handle.bottom-right {\n                z-index: 10;\n                cursor: se-resize;\n                height: var(--box-width);\n                width: var(--box-width);\n                bottom: calc(-1 * var(--box-overflow));\n                right: calc(-1 * var(--box-overflow));\n            }\n            \n            .handle.bottom-left {\n                z-index: 10;\n                cursor: sw-resize;\n                height: var(--box-width);\n                width: var(--box-width);\n                bottom: calc(-1 * var(--box-overflow));\n                left: calc(-1 * var(--box-overflow));\n            }\n            \n            .handle.top-left {\n                z-index: 10;\n                cursor: nw-resize;\n                height: var(--box-width);\n                width: var(--box-width);\n                top: calc(-1 * var(--box-overflow));\n                left: calc(-1 * var(--box-overflow));\n            }\n            \n            .handle.top-right {\n                z-index: 10;\n                cursor: ne-resize;\n                height: var(--box-width);\n                width: var(--box-width);\n                top: calc(-1 * var(--box-overflow));\n                right: calc(-1 * var(--box-overflow));\n            }\n            </style>\n            <slot name=\"content\"></slot>\n        </div>`;\n    shadow.appendChild(template.content.cloneNode(true));\n\n    this.#container = shadow.querySelector(\".resizer\");\n\n    // For tracking the changes\n    this.#resizeObserver = new ResizeObserverManager(\n      this.#container,\n      (detail) => this.dispatch(\"resize\", detail),\n    );\n    this.#resizeObserver.subscribe();\n\n    const width = this.getAttribute(attributes.WIDTH);\n    if (width && isValueInPixels(width)) {\n      this.#container.style.width = width;\n    } else {\n      this.#container.style.width = defaultStyles.width;\n      console.error(\n        `Please set a ${attributes.WIDTH} attribute to the resizer tag.`,\n      );\n    }\n\n    const height = this.getAttribute(attributes.HEIGHT);\n    if (height && isValueInPixels(height)) {\n      this.#container.style.height = height;\n    } else {\n      this.#container.style.height = defaultStyles.height;\n      console.error(\n        `Please set a ${attributes.HEIGHT} attribute to the resizer tag.`,\n      );\n    }\n\n    this._addResizeHandles();\n  }\n\n  disconnectedCallback() {\n    this.#resizeObserver.unsubscribe();\n  }\n\n  attributeChangedCallback(attributeName, oldValue, newValue) {\n    if (oldValue === null) return;\n\n    if (\n      attributeName === attributes.WIDTH ||\n      attributeName === attributes.HEIGHT\n    ) {\n      this.#container.style[attributeName] = newValue;\n      return;\n    }\n\n    if (Resizer.observedAttributes.includes(attributeName)) {\n      if (this.attributeIsValid(attributeName)) {\n        this.handlesAddMethodMap[attributeName].call(this);\n      } else {\n        this._removeResizeHandle(this.attributesToPositionMap[attributeName]);\n      }\n    }\n  }\n\n  dispatch(type, detail) {\n    this.dispatchEvent(\n      new CustomEvent(type, {\n        bubbles: true,\n        cancelable: false,\n        detail,\n      }),\n    );\n  }\n\n  get maxWidth() {\n    const max = this.getAttribute(attributes.MAX_WIDTH);\n    if (!isValueInPixels(max)) return 0;\n\n    return parseInt(max, 10);\n  }\n\n  get minWidth() {\n    const min = this.getAttribute(attributes.MIN_WIDTH);\n    if (!isValueInPixels(min)) return 0;\n\n    return parseInt(min, 10);\n  }\n\n  get maxHeight() {\n    const max = this.getAttribute(attributes.MAX_HEIGHT);\n    if (!isValueInPixels(max)) return 0;\n\n    return parseInt(max, 10);\n  }\n\n  get minHeight() {\n    const min = this.getAttribute(attributes.MIN_HEIGHT);\n    if (!isValueInPixels(min)) return 0;\n\n    return parseInt(min, 10);\n  }\n\n  /**\n   * Checks if attribute exists/is true\n   * @param {string} attributeName\n   * @returns {boolean}\n   */\n  attributeIsValid(attributeName) {\n    if (!this.hasAttribute(attributeName)) return false;\n\n    const attValue = this.getAttribute(attributeName);\n\n    if (attValue === \"\") return true;\n\n    return attValue === \"true\";\n  }\n\n  _addResizeHandles() {\n    for (const [attributeName, addHandle] of Object.entries(\n      this.handlesAddMethodMap,\n    )) {\n      if (this.attributeIsValid(attributeName)) {\n        addHandle.call(this);\n      }\n    }\n  }\n\n  _removeResizeHandle(position) {\n    const handle = this.#container.querySelector(\n      `.handle.${position}`,\n    );\n\n    this.#container.removeChild(handle);\n  }\n\n  _createHandle(position) {\n    let handleHtml = `<div class='handle ${position}' part='handle handle-${position}' data-cy='handle-${position}'></div>`;\n    this.#container.insertAdjacentHTML(\"beforeend\", handleHtml);\n    const handle = this.#container.querySelector(`.handle.${position}`);\n\n    return handle;\n  }\n\n  _addRightHandle() {\n    const rightHandle = this._createHandle(positions.RIGHT);\n\n    const onDrag = (event) => {\n      event.preventDefault();\n\n      const shiftX = event.clientX - rightHandle.getBoundingClientRect().left;\n\n      rightHandle.setPointerCapture(event.pointerId);\n\n      rightHandle.onpointermove = (e) =>\n        this._setWidth(e.clientX, shiftX, \"right\");\n\n      rightHandle.onpointerup = () => {\n        rightHandle.onpointermove = null;\n        rightHandle.onpointerup = null;\n      };\n    };\n\n    rightHandle.onpointerdown = onDrag;\n\n    rightHandle.ondragstart = () => false;\n  }\n\n  _addLeftHandle() {\n    const leftHandle = this._createHandle(positions.LEFT);\n\n    const onDrag = (event) => {\n      event.preventDefault();\n\n      const shiftX = event.clientX - leftHandle.getBoundingClientRect().right;\n\n      leftHandle.setPointerCapture(event.pointerId);\n\n      leftHandle.onpointermove = (e) =>\n        this._setWidth(e.clientX, shiftX, \"left\");\n\n      leftHandle.onpointerup = () => {\n        leftHandle.onpointermove = null;\n        leftHandle.onpointerup = null;\n      };\n    };\n\n    leftHandle.onpointerdown = onDrag;\n\n    leftHandle.ondragstart = () => false;\n  }\n\n  _addBottomHandle() {\n    const bottomHandle = this._createHandle(positions.BOTTOM);\n\n    const onDrag = (event) => {\n      event.preventDefault();\n\n      const shiftY = event.clientY - bottomHandle.getBoundingClientRect().top;\n\n      bottomHandle.setPointerCapture(event.pointerId);\n\n      bottomHandle.onpointermove = (e) =>\n        this._setHeight(e.clientY, shiftY, \"bottom\");\n\n      bottomHandle.onpointerup = () => {\n        bottomHandle.onpointermove = null;\n        bottomHandle.onpointerup = null;\n      };\n    };\n\n    bottomHandle.onpointerdown = onDrag;\n\n    bottomHandle.ondragstart = () => false;\n  }\n\n  _addTopHandle() {\n    const topHandle = this._createHandle(positions.TOP);\n\n    const onDrag = (event) => {\n      event.preventDefault();\n\n      const shiftY = event.clientY - topHandle.getBoundingClientRect().bottom;\n\n      topHandle.setPointerCapture(event.pointerId);\n\n      topHandle.onpointermove = (e) =>\n        this._setHeight(e.clientY, shiftY, \"top\");\n\n      topHandle.onpointerup = () => {\n        topHandle.onpointermove = null;\n        topHandle.onpointerup = null;\n      };\n    };\n\n    topHandle.onpointerdown = onDrag;\n\n    topHandle.ondragstart = () => false;\n  }\n\n  _addBottomRightHandle() {\n    const bottomRightHandle = this._createHandle(positions.BOTTOM_RIGHT);\n\n    const onDrag = (event) => {\n      event.preventDefault();\n\n      const shiftX =\n        event.clientX - bottomRightHandle.getBoundingClientRect().left;\n      const shiftY =\n        event.clientY - bottomRightHandle.getBoundingClientRect().top;\n\n      bottomRightHandle.setPointerCapture(event.pointerId);\n\n      bottomRightHandle.onpointermove = (e) => {\n        this._setWidth(e.clientX, shiftX, \"right\");\n        this._setHeight(e.clientY, shiftY, \"bottom\");\n      };\n\n      bottomRightHandle.onpointerup = () => {\n        bottomRightHandle.onpointermove = null;\n        bottomRightHandle.onpointerup = null;\n      };\n    };\n\n    bottomRightHandle.onpointerdown = onDrag;\n\n    bottomRightHandle.ondragstart = () => false;\n  }\n\n  _addBottomLeftHandle() {\n    const bottomLeftHandle = this._createHandle(positions.BOTTOM_LEFT);\n\n    const onDrag = (event) => {\n      event.preventDefault();\n\n      const shiftX =\n        event.clientX - bottomLeftHandle.getBoundingClientRect().left;\n      const shiftY =\n        event.clientY - bottomLeftHandle.getBoundingClientRect().top;\n\n      bottomLeftHandle.setPointerCapture(event.pointerId);\n\n      bottomLeftHandle.onpointermove = (e) => {\n        this._setWidth(e.clientX, shiftX, \"left\");\n        this._setHeight(e.clientY, shiftY, \"bottom\");\n      };\n\n      bottomLeftHandle.onpointerup = () => {\n        bottomLeftHandle.onpointermove = null;\n        bottomLeftHandle.onpointerup = null;\n      };\n    };\n\n    bottomLeftHandle.onpointerdown = onDrag;\n\n    bottomLeftHandle.ondragstart = () => false;\n  }\n\n  _addTopLeftHandle() {\n    const topLeftHandle = this._createHandle(positions.TOP_LEFT);\n\n    const onDrag = (event) => {\n      event.preventDefault();\n\n      const shiftX = event.clientX - topLeftHandle.getBoundingClientRect().left;\n      const shiftY = event.clientY - topLeftHandle.getBoundingClientRect().top;\n\n      topLeftHandle.setPointerCapture(event.pointerId);\n\n      topLeftHandle.onpointermove = (e) => {\n        this._setWidth(e.clientX, shiftX, \"left\");\n        this._setHeight(e.clientY, shiftY, \"top\");\n      };\n\n      topLeftHandle.onpointerup = () => {\n        topLeftHandle.onpointermove = null;\n        topLeftHandle.onpointerup = null;\n      };\n    };\n\n    topLeftHandle.onpointerdown = onDrag;\n\n    topLeftHandle.ondragstart = () => false;\n  }\n\n  _addTopRightHandle() {\n    const topRightHandle = this._createHandle(positions.TOP_RIGHT);\n\n    const onDrag = (event) => {\n      event.preventDefault();\n\n      const shiftX =\n        event.clientX - topRightHandle.getBoundingClientRect().left;\n      const shiftY =\n        event.clientY - topRightHandle.getBoundingClientRect().bottom;\n\n      topRightHandle.setPointerCapture(event.pointerId);\n\n      topRightHandle.onpointermove = (e) => {\n        this._setWidth(e.clientX, shiftX, \"right\");\n        this._setHeight(e.clientY, shiftY, \"top\");\n      };\n\n      topRightHandle.onpointerup = () => {\n        topRightHandle.onpointermove = null;\n        topRightHandle.onpointerup = null;\n      };\n    };\n\n    topRightHandle.onpointerdown = onDrag;\n\n    topRightHandle.ondragstart = () => false;\n  }\n\n  /**\n   * Sets the container height\n   * @param {number} clientY\n   * @param {number} shiftY\n   * @param {\"bottom\"|\"top\"} direction\n   */\n  _setHeight = (clientY, shiftY, direction) => {\n    const clientRectMapper = {\n      bottom: \"top\",\n      top: \"bottom\",\n    };\n\n    let newHeight =\n      clientY -\n      shiftY -\n      this.#container.getBoundingClientRect()[clientRectMapper[direction]];\n    newHeight = direction === \"top\" ? -newHeight : newHeight;\n\n    if (this.maxHeight && newHeight >= this.maxHeight) {\n      newHeight = this.maxHeight;\n    }\n\n    if (this.minHeight && newHeight <= this.minHeight) {\n      newHeight = this.minHeight;\n    }\n\n    this.#container.style.height = `${newHeight}px`;\n  };\n\n  /**\n   * Description\n   * @param {number} clientX\n   * @param {number} shiftX\n   * @param {\"left\"|\"right\"} direction\n   */\n  _setWidth = (clientX, shiftX, direction) => {\n    const clientRectMapper = {\n      left: \"right\",\n      right: \"left\",\n    };\n\n    let newWidth =\n      clientX -\n      shiftX -\n      this.#container.getBoundingClientRect()[clientRectMapper[direction]];\n    newWidth = direction === \"left\" ? -newWidth : newWidth;\n\n    if (this.maxWidth && newWidth >= this.maxWidth) {\n      newWidth = this.maxWidth;\n    }\n\n    if (this.minWidth && newWidth <= this.minWidth) {\n      newWidth = this.minWidth;\n    }\n\n    this.#container.style.width = `${newWidth}px`;\n  };\n}\n","import { Resizer } from \"./Resizer.mjs\";\n\ncustomElements.define(\"resizer-box\", Resizer);\n"],"names":["attributes","defaultStyles","positions","ResizeObserverManager","container","resizeObserver","onChange","constructor","Error","this","subscribe","ResizeObserver","entries","_onResize","call","observe","unsubscribe","disconnect","width","height","contentRect","detail","isValueInPixels","value","test","Resizer","HTMLElement","static","handlesAddMethodMap","attributes_RESIZE_RIGHT","_addRightHandle","attributes_RESIZE_BOTTOM","_addBottomHandle","attributes_RESIZE_BOTTOM_RIGHT","_addBottomRightHandle","attributes_RESIZE_LEFT","_addLeftHandle","attributes_RESIZE_BOTTOM_LEFT","_addBottomLeftHandle","attributes_RESIZE_TOP_LEFT","_addTopLeftHandle","attributes_RESIZE_TOP_RIGHT","_addTopRightHandle","attributes_RESIZE_TOP","_addTopHandle","attributesToPositionMap","super","connectedCallback","shadow","attachShadow","mode","template","document","createElement","innerHTML","appendChild","content","cloneNode","querySelector","dispatch","getAttribute","style","console","error","_addResizeHandles","disconnectedCallback","attributeChangedCallback","attributeName","oldValue","newValue","observedAttributes","includes","attributeIsValid","_removeResizeHandle","type","dispatchEvent","CustomEvent","bubbles","cancelable","maxWidth","max","parseInt","minWidth","min","maxHeight","minHeight","hasAttribute","attValue","addHandle","Object","position","handle","removeChild","_createHandle","handleHtml","insertAdjacentHTML","rightHandle","onpointerdown","event","preventDefault","shiftX","clientX","getBoundingClientRect","left","setPointerCapture","pointerId","onpointermove","e","_setWidth","onpointerup","ondragstart","leftHandle","right","bottomHandle","shiftY","clientY","top","_setHeight","topHandle","bottom","bottomRightHandle","bottomLeftHandle","topLeftHandle","topRightHandle","direction","newHeight","newWidth","customElements","define"],"mappings":"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"}